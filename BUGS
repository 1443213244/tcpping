Some servers try to send repeated SYN/ACK commands, even after we've RST the
connection.  I think this has to do with a firewall allowing related
connections, and blind RSTs not being related connections.  I'll have to try to
debug this further.

Regardless, it messes up the error reporting and makes this less robust.  So,
the reporting should be changed to disregard duplicate SYN/ACK packets from the
server.

Not yet sure what to do about the fact that we're basically doing a
rate-limited SYN flood without the RSTs getting through to the target server,
if that's what's really happening.

e.g:

$ tcpping -p 80 -c 5 10.0.1.3

Capturing on eth0 (this is the outbound interface on the machine running tcpping)
  0.000000  192.168.0.3 -> 10.0.1.3  TCP 54734 > http [SYN] Seq=0 Win=32768 Len=0
  0.014631  10.0.1.3 -> 192.168.0.3  TCP http > 54734 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  0.014648  192.168.0.3 -> 10.0.1.3  TCP 54734 > http [RST] Seq=1 Win=0 Len=0
  1.014847  192.168.0.3 -> 10.0.1.3  TCP 61399 > http [SYN] Seq=0 Win=32768 Len=0
  1.030652  10.0.1.3 -> 192.168.0.3  TCP http > 61399 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  1.030669  192.168.0.3 -> 10.0.1.3  TCP 61399 > http [RST] Seq=1 Win=0 Len=0
  2.030844  192.168.0.3 -> 10.0.1.3  TCP 46614 > http [SYN] Seq=0 Win=32768 Len=0
  2.046714  10.0.1.3 -> 192.168.0.3  TCP http > 46614 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  2.046731  192.168.0.3 -> 10.0.1.3  TCP 46614 > http [RST] Seq=1 Win=0 Len=0
  3.046901  192.168.0.3 -> 10.0.1.3  TCP 25416 > http [SYN] Seq=0 Win=32768 Len=0
  3.062631  10.0.1.3 -> 192.168.0.3  TCP http > 25416 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  3.062644  192.168.0.3 -> 10.0.1.3  TCP 25416 > http [RST] Seq=1 Win=0 Len=0
  3.185864  10.0.1.3 -> 192.168.0.3  TCP http > 54734 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  3.185885  192.168.0.3 -> 10.0.1.3  TCP 54734 > http [RST] Seq=1 Win=0 Len=0
  4.062828  192.168.0.3 -> 10.0.1.3  TCP 14954 > http [SYN] Seq=0 Win=32768 Len=0
  4.078673  10.0.1.3 -> 192.168.0.3  TCP http > 14954 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  4.078693  192.168.0.3 -> 10.0.1.3  TCP 14954 > http [RST] Seq=1 Win=0 Len=0
  4.385647  10.0.1.3 -> 192.168.0.3  TCP http > 61399 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  4.385670  192.168.0.3 -> 10.0.1.3  TCP 61399 > http [RST] Seq=1 Win=0 Len=0
  5.985359  10.0.1.3 -> 192.168.0.3  TCP http > 46614 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  5.985379  192.168.0.3 -> 10.0.1.3  TCP 46614 > http [RST] Seq=1 Win=0 Len=0
  7.585074  10.0.1.3 -> 192.168.0.3  TCP http > 25416 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  7.585094  192.168.0.3 -> 10.0.1.3  TCP 25416 > http [RST] Seq=1 Win=0 Len=0
  8.185029  10.0.1.3 -> 192.168.0.3  TCP http > 14954 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  8.185051  192.168.0.3 -> 10.0.1.3  TCP 14954 > http [RST] Seq=1 Win=0 Len=0
  9.384813  10.0.1.3 -> 192.168.0.3  TCP http > 54734 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
  9.384835  192.168.0.3 -> 10.0.1.3  TCP 54734 > http [RST] Seq=1 Win=0 Len=0
 10.384615  10.0.1.3 -> 192.168.0.3  TCP http > 61399 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
 10.384636  192.168.0.3 -> 10.0.1.3  TCP 61399 > http [RST] Seq=1 Win=0 Len=0
 11.984363  10.0.1.3 -> 192.168.0.3  TCP http > 46614 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
 11.984378  192.168.0.3 -> 10.0.1.3  TCP 46614 > http [RST] Seq=1 Win=0 Len=0
 13.584040  10.0.1.3 -> 192.168.0.3  TCP http > 25416 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
 13.584060  192.168.0.3 -> 10.0.1.3  TCP 25416 > http [RST] Seq=1 Win=0 Len=0
 14.183978  10.0.1.3 -> 192.168.0.3  TCP http > 14954 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460
 14.183998  192.168.0.3 -> 10.0.1.3  TCP 14954 > http [RST] Seq=1 Win=0 Len=0

A good fix would be to put outstanding ping sequences on a stack and pop them
off when the "expire," for some definition of "expire" that I haven't come up
with yet.
